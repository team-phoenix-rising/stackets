{
  "title": "INSERT_TITLE_HERE",
  "snippet": "INSERT_SNIPPET_HERE",
  "notes": "INSERT_SHORT_DESCRIPTION",
  "TopicId": NUMBER
}


express.js

"title": "Express.js",
"snippet":

assumptions:
1) you have express installed

ROUTING:


var express = require('express')
var app = express()

// respond with "hello world" when a GET request is made to the homepage
app.get('/', function (req, res) {
  res.send('hello world')
})

-------------

promise

A Promise is used in asynchronous computations to represent an operation that hasn't completed yet, but is expected in the future.

var p = new Promise(function(resolve, reject) { });
The catch() method returns a Promise and deals with rejected cases only.

p.catch(function(reason) { /* handle rejection */ });
The then() method returns a Promise. It takes 2 arguments: callback for the success & failure cases.

p.then(function(value) { /* handle fulfillment */, function(reason) { /* handle rejection */ });
The Promise.all(iterable) method returns a promise that resolves when all of the promises in the iterable argument have resolved, or rejects with the reason of the first passed promise that rejects.

Promise.all([p1, p2, p3]).then(function(values) { console.log(values) });

_______



es6 cheatsheet


Declarations

Declares a read-only named constant.

const name = 'yourName';
Declares a block scope local variable.

let index = 0;
Template Strings

Using the `${}` syntax, strings can embed expressions.

const name = 'Oggy';
const age = 3;

console.log(`My cat is named ${name} and is ${age} years old.`);
Modules

To import functions, objects or primitives exported from an external module. These are the most common types of importing.

import name from 'module-name';
import * as name from 'module-name';
import { foo, bar } from 'module-name';
To export functions, objects or primitives from a given file or module.

export { myFunction };
export const name = 'yourName';
export default myFunctionOrClass
Spread Operator

The spread operator allows an expression to be expanded in places where multiple arguments (for function calls) or multiple elements (for array literals) are expected.

myFunction(...iterableObject);
<ChildComponent {...this.props} />
Promises

A Promise is used in asynchronous computations to represent an operation that hasn't completed yet, but is expected in the future.

var p = new Promise(function(resolve, reject) { });
The catch() method returns a Promise and deals with rejected cases only.

p.catch(function(reason) { /* handle rejection */ });
The then() method returns a Promise. It takes 2 arguments: callback for the success & failure cases.

p.then(function(value) { /* handle fulfillment */, function(reason) { /* handle rejection */ });
The Promise.all(iterable) method returns a promise that resolves when all of the promises in the iterable argument have resolved, or rejects with the reason of the first passed promise that rejects.

Promise.all([p1, p2, p3]).then(function(values) { console.log(values) });
Arrow Functions

Arrow function expression. Shorter syntax & lexically binds the this value. Arrow functions are anonymous.

singleParam => { statements }
() => { statements }
(param1, param2) => expression
const arr = [1, 2, 3, 4, 5];
const squares = arr.map(x => x * x);
Classes

The class declaration creates a new class using prototype-based inheritance.

class Person {
  constructor(name, age, gender) {
    this.name   = name;
    this.age    = age;
    this.gender = gender;
  }

  incrementAge() {
    this.age++;
  }
}
